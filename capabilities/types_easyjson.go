// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package capabilities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities(in *jlexer.Lexer, out *sigstorePubKeysVerifyV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities1(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "pub_keys":
			if in.IsNull() {
				in.Skip()
				out.PubKeys = nil
			} else {
				in.Delim('[')
				if out.PubKeys == nil {
					if !in.IsDelim(']') {
						out.PubKeys = make([]string, 0, 4)
					} else {
						out.PubKeys = []string{}
					}
				} else {
					out.PubKeys = (out.PubKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.PubKeys = append(out.PubKeys, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Annotations)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities(out *jwriter.Writer, in sigstorePubKeysVerifyV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"pub_keys\":"
		out.RawString(prefix)
		if in.PubKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.PubKeys {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Annotations {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstorePubKeysVerifyV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstorePubKeysVerifyV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstorePubKeysVerifyV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstorePubKeysVerifyV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities1(in *jlexer.Lexer, out *SigstorePubKeyVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities1(out *jwriter.Writer, in SigstorePubKeyVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities2(in *jlexer.Lexer, out *sigstorePubKeysVerifyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SigstorePubKeyVerify":
			(out.SigstorePubKeysVerify).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities2(out *jwriter.Writer, in sigstorePubKeysVerifyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SigstorePubKeyVerify\":"
		out.RawString(prefix[1:])
		(in.SigstorePubKeysVerify).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstorePubKeysVerifyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstorePubKeysVerifyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstorePubKeysVerifyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstorePubKeysVerifyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities2(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities3(in *jlexer.Lexer, out *sigstorePubKeysVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			out.Image = string(in.String())
		case "pub_keys":
			if in.IsNull() {
				in.Skip()
				out.PubKeys = nil
			} else {
				in.Delim('[')
				if out.PubKeys == nil {
					if !in.IsDelim(']') {
						out.PubKeys = make([]string, 0, 4)
					} else {
						out.PubKeys = []string{}
					}
				} else {
					out.PubKeys = (out.PubKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.PubKeys = append(out.PubKeys, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Annotations)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities3(out *jwriter.Writer, in sigstorePubKeysVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"pub_keys\":"
		out.RawString(prefix)
		if in.PubKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.PubKeys {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Annotations {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstorePubKeysVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstorePubKeysVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstorePubKeysVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstorePubKeysVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities3(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities4(in *jlexer.Lexer, out *sigstoreKeylessVerifyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SigstoreKeylessVerify":
			(out.SigstoreKeylessVerify).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities4(out *jwriter.Writer, in sigstoreKeylessVerifyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SigstoreKeylessVerify\":"
		out.RawString(prefix[1:])
		(in.SigstoreKeylessVerify).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessVerifyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessVerifyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessVerifyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessVerifyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities4(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities5(in *jlexer.Lexer, out *sigstoreKeylessVerifyExactV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities6(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "keyless":
			if in.IsNull() {
				in.Skip()
				out.Keyless = nil
			} else {
				in.Delim('[')
				if out.Keyless == nil {
					if !in.IsDelim(']') {
						out.Keyless = make([]KeylessInfo, 0, 2)
					} else {
						out.Keyless = []KeylessInfo{}
					}
				} else {
					out.Keyless = (out.Keyless)[:0]
				}
				for !in.IsDelim(']') {
					var v11 KeylessInfo
					(v11).UnmarshalEasyJSON(in)
					out.Keyless = append(out.Keyless, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.Annotations)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities5(out *jwriter.Writer, in sigstoreKeylessVerifyExactV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"keyless\":"
		out.RawString(prefix)
		if in.Keyless == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Keyless {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Annotations {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessVerifyExactV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessVerifyExactV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessVerifyExactV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessVerifyExactV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities5(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities6(in *jlexer.Lexer, out *SigstoreKeylessVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities6(out *jwriter.Writer, in SigstoreKeylessVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities7(in *jlexer.Lexer, out *sigstoreKeylessVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			out.Image = string(in.String())
		case "keyless":
			if in.IsNull() {
				in.Skip()
				out.Keyless = nil
			} else {
				in.Delim('[')
				if out.Keyless == nil {
					if !in.IsDelim(']') {
						out.Keyless = make([]KeylessInfo, 0, 2)
					} else {
						out.Keyless = []KeylessInfo{}
					}
				} else {
					out.Keyless = (out.Keyless)[:0]
				}
				for !in.IsDelim(']') {
					var v16 KeylessInfo
					(v16).UnmarshalEasyJSON(in)
					out.Keyless = append(out.Keyless, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 string
					v17 = string(in.String())
					(out.Annotations)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities7(out *jwriter.Writer, in sigstoreKeylessVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"keyless\":"
		out.RawString(prefix)
		if in.Keyless == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Keyless {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Annotations {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities7(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities8(in *jlexer.Lexer, out *sigstoreKeylessPrefixVerifyV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities9(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "keyless_prefix":
			if in.IsNull() {
				in.Skip()
				out.KeylessPrefix = nil
			} else {
				in.Delim('[')
				if out.KeylessPrefix == nil {
					if !in.IsDelim(']') {
						out.KeylessPrefix = make([]KeylessPrefixInfo, 0, 2)
					} else {
						out.KeylessPrefix = []KeylessPrefixInfo{}
					}
				} else {
					out.KeylessPrefix = (out.KeylessPrefix)[:0]
				}
				for !in.IsDelim(']') {
					var v21 KeylessPrefixInfo
					(v21).UnmarshalEasyJSON(in)
					out.KeylessPrefix = append(out.KeylessPrefix, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 string
					v22 = string(in.String())
					(out.Annotations)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities8(out *jwriter.Writer, in sigstoreKeylessPrefixVerifyV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"keyless_prefix\":"
		out.RawString(prefix)
		if in.KeylessPrefix == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.KeylessPrefix {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Annotations {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				out.String(string(v25Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreKeylessPrefixVerifyV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreKeylessPrefixVerifyV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreKeylessPrefixVerifyV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreKeylessPrefixVerifyV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities8(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities9(in *jlexer.Lexer, out *SigstoreKeylessPrefixVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities9(out *jwriter.Writer, in SigstoreKeylessPrefixVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities10(in *jlexer.Lexer, out *sigstoreGithubActionsVerifyV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities11(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "repo":
			out.Repo = string(in.String())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 string
					v26 = string(in.String())
					(out.Annotations)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities10(out *jwriter.Writer, in sigstoreGithubActionsVerifyV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	if in.Repo != "" {
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Annotations {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				out.String(string(v27Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreGithubActionsVerifyV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreGithubActionsVerifyV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreGithubActionsVerifyV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreGithubActionsVerifyV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities10(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities11(in *jlexer.Lexer, out *SigstoreGithubActionsVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities11(out *jwriter.Writer, in SigstoreGithubActionsVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities12(in *jlexer.Lexer, out *sigstoreCertificateVerify) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities13(in, &out.Type)
		case "image":
			out.Image = string(in.String())
		case "certificate":
			out.Certificate = string(in.String())
		case "certificate_chain":
			if in.IsNull() {
				in.Skip()
				out.CertificateChain = nil
			} else {
				in.Delim('[')
				if out.CertificateChain == nil {
					if !in.IsDelim(']') {
						out.CertificateChain = make([]string, 0, 4)
					} else {
						out.CertificateChain = []string{}
					}
				} else {
					out.CertificateChain = (out.CertificateChain)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.CertificateChain = append(out.CertificateChain, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "require_rekor_bundle":
			out.RequireRekorBundle = bool(in.Bool())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Annotations)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities12(out *jwriter.Writer, in sigstoreCertificateVerify) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		(in.Type).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"certificate\":"
		out.RawString(prefix)
		out.String(string(in.Certificate))
	}
	if len(in.CertificateChain) != 0 {
		const prefix string = ",\"certificate_chain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.CertificateChain {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"require_rekor_bundle\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireRekorBundle))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Annotations {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.String(string(v32Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sigstoreCertificateVerify) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sigstoreCertificateVerify) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sigstoreCertificateVerify) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sigstoreCertificateVerify) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities12(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities13(in *jlexer.Lexer, out *SigstoreCertificateVerifyType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities13(out *jwriter.Writer, in SigstoreCertificateVerifyType) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities14(in *jlexer.Lexer, out *VerificationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_trusted":
			out.IsTrusted = bool(in.Bool())
		case "digest":
			out.Digest = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities14(out *jwriter.Writer, in VerificationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_trusted\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsTrusted))
	}
	{
		const prefix string = ",\"digest\":"
		out.RawString(prefix)
		out.String(string(in.Digest))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VerificationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VerificationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VerificationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VerificationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities14(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities15(in *jlexer.Lexer, out *OciManifestResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "digest":
			out.Digest = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities15(out *jwriter.Writer, in OciManifestResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"digest\":"
		out.RawString(prefix[1:])
		out.String(string(in.Digest))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OciManifestResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OciManifestResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OciManifestResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OciManifestResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities15(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities16(in *jlexer.Lexer, out *LookupHostResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ips":
			if in.IsNull() {
				in.Skip()
				out.Ips = nil
			} else {
				in.Delim('[')
				if out.Ips == nil {
					if !in.IsDelim(']') {
						out.Ips = make([]string, 0, 4)
					} else {
						out.Ips = []string{}
					}
				} else {
					out.Ips = (out.Ips)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Ips = append(out.Ips, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities16(out *jwriter.Writer, in LookupHostResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ips\":"
		out.RawString(prefix[1:])
		if in.Ips == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Ips {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LookupHostResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LookupHostResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LookupHostResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LookupHostResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities16(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities17(in *jlexer.Lexer, out *ListResourcesByNamespaceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "label_selector":
			out.LabelSelector = string(in.String())
		case "field_selector":
			out.FieldSelector = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities17(out *jwriter.Writer, in ListResourcesByNamespaceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_version\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	if in.LabelSelector != "" {
		const prefix string = ",\"label_selector\":"
		out.RawString(prefix)
		out.String(string(in.LabelSelector))
	}
	if in.FieldSelector != "" {
		const prefix string = ",\"field_selector\":"
		out.RawString(prefix)
		out.String(string(in.FieldSelector))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListResourcesByNamespaceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListResourcesByNamespaceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListResourcesByNamespaceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListResourcesByNamespaceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities17(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities18(in *jlexer.Lexer, out *ListAllResourcesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "label_selector":
			out.LabelSelector = string(in.String())
		case "field_selector":
			out.FieldSelector = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities18(out *jwriter.Writer, in ListAllResourcesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_version\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.LabelSelector != "" {
		const prefix string = ",\"label_selector\":"
		out.RawString(prefix)
		out.String(string(in.LabelSelector))
	}
	if in.FieldSelector != "" {
		const prefix string = ",\"field_selector\":"
		out.RawString(prefix)
		out.String(string(in.FieldSelector))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListAllResourcesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListAllResourcesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListAllResourcesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListAllResourcesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities18(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities19(in *jlexer.Lexer, out *KeylessPrefixInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issuer":
			out.Issuer = string(in.String())
		case "url_prefix":
			out.UrlPrefix = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities19(out *jwriter.Writer, in KeylessPrefixInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issuer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Issuer))
	}
	{
		const prefix string = ",\"url_prefix\":"
		out.RawString(prefix)
		out.String(string(in.UrlPrefix))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeylessPrefixInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeylessPrefixInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeylessPrefixInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeylessPrefixInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities19(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities20(in *jlexer.Lexer, out *KeylessInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issuer":
			out.Issuer = string(in.String())
		case "subject":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities20(out *jwriter.Writer, in KeylessInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issuer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Issuer))
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeylessInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeylessInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeylessInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeylessInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities20(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities21(in *jlexer.Lexer, out *GetResourceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "disable_cache":
			out.DisableCache = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities21(out *jwriter.Writer, in GetResourceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_version\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"disable_cache\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableCache))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetResourceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetResourceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetResourceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetResourceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities21(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities22(in *jlexer.Lexer, out *CertificateVerificationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trusted":
			out.Trusted = bool(in.Bool())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities22(out *jwriter.Writer, in CertificateVerificationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trusted\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Trusted))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CertificateVerificationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CertificateVerificationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CertificateVerificationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CertificateVerificationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities22(l, v)
}
func easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities23(in *jlexer.Lexer, out *CertificateVerificationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cert":
			out.Cert = string(in.String())
		case "cert_chain":
			if in.IsNull() {
				in.Skip()
				out.CertChain = nil
			} else {
				in.Delim('[')
				if out.CertChain == nil {
					if !in.IsDelim(']') {
						out.CertChain = make([]string, 0, 4)
					} else {
						out.CertChain = []string{}
					}
				} else {
					out.CertChain = (out.CertChain)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.CertChain = append(out.CertChain, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "not_after":
			out.NotAfter = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities23(out *jwriter.Writer, in CertificateVerificationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cert\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cert))
	}
	if len(in.CertChain) != 0 {
		const prefix string = ",\"cert_chain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v37, v38 := range in.CertChain {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	if in.NotAfter != "" {
		const prefix string = ",\"not_after\":"
		out.RawString(prefix)
		out.String(string(in.NotAfter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CertificateVerificationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CertificateVerificationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComKubewardenPolicySdkGoCapabilities23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CertificateVerificationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CertificateVerificationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComKubewardenPolicySdkGoCapabilities23(l, v)
}
